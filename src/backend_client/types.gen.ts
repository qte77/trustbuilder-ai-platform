// This file is auto-generated by @hey-api/openapi-ts

/**
 * Badges
 */
export type Badges = {
    /**
     * Id
     */
    id?: number | null;
    /**
     * Challenge Id
     */
    challenge_id: number;
};

/**
 * ChallengeContextResponse
 */
export type ChallengeContextResponse = {
    user_challenge_context: UserChallengeContexts;
    /**
     * Messages
     */
    messages?: Array<Message>;
};

/**
 * Challenges
 */
export type Challenges = {
    /**
     * Id
     */
    id?: number | null;
    /**
     * Name
     */
    name: string;
    /**
     * Tournament Id
     */
    tournament_id: number;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Required Tools
     */
    required_tools?: string | null;
    /**
     * Evaluation Prompt
     */
    evaluation_prompt?: string | null;
};

/**
 * ChatChoice
 * A single choice in the chat completion response.
 *
 * Attributes:
 * index: The index of this choice.
 * message: The message generated by the model.
 * finish_reason: The reason the model stopped generating.
 */
export type ChatChoice = {
    /**
     * Index
     */
    index: number;
    message: ChatMessage;
    /**
     * Finish Reason
     */
    finish_reason: string | null;
};

/**
 * ChatMessage
 * A single chat message in the conversation.
 *
 * Attributes:
 * role: The role of the message sender (user, assistant, system).
 * content: The content of the message.
 * name: Optional name of the message sender.
 */
export type ChatMessage = {
    /**
     * Role
     */
    role: 'user' | 'assistant' | 'system';
    /**
     * Content
     */
    content: string;
    /**
     * Name
     */
    name?: string | null;
};

/**
 * ChatRequest
 * Request model for chat completions.
 *
 * Attributes:
 * model: The model to use for completion.
 * messages: List of messages in the conversation.
 * temperature: Sampling temperature (0.0 to 2.0).
 * max_tokens: Maximum tokens in the response.
 * stream: Whether to stream the response.
 * user: Optional user identifier for tracking.
 */
export type ChatRequest = {
    /**
     * Model
     */
    model: string;
    /**
     * Messages
     */
    messages: Array<ChatMessage>;
    /**
     * Temperature
     */
    temperature?: number | null;
    /**
     * Max Tokens
     */
    max_tokens?: number | null;
    /**
     * Stream
     */
    stream?: boolean | null;
    /**
     * User
     */
    user?: string | null;
};

/**
 * ChatResponse
 * Response model for chat completions.
 *
 * Attributes:
 * id: Unique identifier for the completion.
 * object: The object type (always "chat.completion").
 * created: Unix timestamp of when the completion was created.
 * model: The model used for the completion.
 * choices: List of completion choices.
 * usage: Token usage information.
 */
export type ChatResponse = {
    /**
     * Id
     */
    id: string;
    /**
     * Object
     */
    object: string;
    /**
     * Created
     */
    created: number;
    /**
     * Model
     */
    model: string;
    /**
     * Choices
     */
    choices: Array<ChatChoice>;
    usage?: ChatUsage | null;
};

/**
 * ChatUsage
 * Token usage information for the chat completion.
 *
 * Attributes:
 * prompt_tokens: Number of tokens in the prompt.
 * completion_tokens: Number of tokens in the completion.
 * total_tokens: Total number of tokens used.
 */
export type ChatUsage = {
    /**
     * Prompt Tokens
     */
    prompt_tokens: number;
    /**
     * Completion Tokens
     */
    completion_tokens: number;
    /**
     * Total Tokens
     */
    total_tokens: number;
};

/**
 * EvalResult
 */
export type EvalResult = {
    /**
     * Reason
     */
    reason?: string | null;
    status: EvalStatus;
};

/**
 * EvalStatus
 */
export type EvalStatus = 'NOT_EVALUATED' | 'SUCCEEDED' | 'FAILED' | 'ERRORED';

/**
 * FunctionCall
 * Function call details within a tool call.
 *
 * Attributes:
 * name: The name of the function to call.
 * arguments: The arguments to call the function with (as JSON string).
 */
export type FunctionCall = {
    /**
     * Name
     */
    name: string;
    /**
     * Arguments
     */
    arguments: string;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * LLMHealthStatus
 * Health status response for LLM service.
 *
 * Attributes:
 * status: Health status (healthy, unhealthy, degraded).
 * available_models: Number of models with valid API keys.
 * missing_keys: List of missing API key environment variables.
 * message: Human-readable status message.
 * details: Additional status details.
 */
export type LlmHealthStatus = {
    /**
     * Status
     */
    status: 'healthy' | 'unhealthy' | 'degraded';
    /**
     * Available Models
     */
    available_models: number;
    /**
     * Missing Keys
     */
    missing_keys: Array<string>;
    /**
     * Message
     */
    message: string;
    /**
     * Details
     */
    details?: {
        [key: string]: unknown;
    } | null;
};

/**
 * Message
 */
export type Message = {
    /**
     * Role
     */
    role: string;
    /**
     * Content
     */
    content: string;
    /**
     * Is Tool Call
     */
    is_tool_call?: boolean;
    /**
     * Tool Name
     */
    tool_name?: string | null;
    /**
     * Tool Calls
     */
    tool_calls?: Array<ToolCall> | null;
    /**
     * Tool Call Id
     */
    tool_call_id?: string | null;
};

/**
 * ModelInfo
 * Information about an available model.
 *
 * Attributes:
 * id: The model identifier.
 * object: The object type (always "model").
 * created: Unix timestamp of when the model was created.
 * owned_by: The organization that owns the model.
 * display_name: Human-readable name for UI display.
 * description: Model description.
 * max_tokens: Maximum tokens supported.
 */
export type ModelInfo = {
    /**
     * Id
     */
    id: string;
    /**
     * Object
     */
    object?: string;
    /**
     * Created
     */
    created: number;
    /**
     * Owned By
     */
    owned_by: string;
    /**
     * Display Name
     */
    display_name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Max Tokens
     */
    max_tokens?: number | null;
};

/**
 * ModelsResponse
 * Response model for listing available models.
 *
 * Attributes:
 * object: The object type (always "list").
 * data: List of available models.
 */
export type ModelsResponse = {
    /**
     * Object
     */
    object?: string;
    /**
     * Data
     */
    data: Array<ModelInfo>;
};

/**
 * SelectionFilter
 */
export type SelectionFilter = 'PAST' | 'ACTIVE' | 'FUTURE' | 'PAST_AND_ACTIVE' | 'ACTIVE_AND_FUTURE';

/**
 * ToolCall
 * A tool call request from the model.
 *
 * Attributes:
 * id: Unique identifier for this tool call.
 * type: The type of tool call (currently only 'function').
 * function: The function call details.
 */
export type ToolCall = {
    /**
     * Id
     */
    id: string;
    /**
     * Type
     */
    type?: 'function';
    function: FunctionCall;
};

/**
 * Tournaments
 */
export type Tournaments = {
    /**
     * Id
     */
    id?: number | null;
    /**
     * Name
     */
    name: string;
    /**
     * Start Date
     */
    start_date: string;
    /**
     * End Date
     */
    end_date: string;
    /**
     * Description
     */
    description?: string | null;
};

/**
 * UserChallengeContexts
 */
export type UserChallengeContexts = {
    /**
     * Id
     */
    id?: number | null;
    /**
     * Can Contribute
     */
    can_contribute: boolean;
    /**
     * Challenge Id
     */
    challenge_id: number;
    /**
     * Started At
     */
    started_at: string;
    /**
     * User Id
     */
    user_id: number;
};

/**
 * UserInfo
 * Represents a user's information including active tournaments, challenges,
 * and badges.
 */
export type UserInfo = {
    /**
     * User Id
     */
    user_id: number;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Active Tournaments
     */
    active_tournaments: Array<Tournaments>;
    /**
     * Active Challenges
     */
    active_challenges: Array<Challenges>;
    /**
     * Badges
     */
    badges: Array<Badges>;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type ListTournamentsTournamentsGetData = {
    body?: never;
    path?: never;
    query?: {
        selection_filter?: SelectionFilter;
        /**
         * Page Index
         */
        page_index?: number;
        /**
         * Count
         */
        count?: number;
    };
    url: '/tournaments';
};

export type ListTournamentsTournamentsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListTournamentsTournamentsGetError = ListTournamentsTournamentsGetErrors[keyof ListTournamentsTournamentsGetErrors];

export type ListTournamentsTournamentsGetResponses = {
    /**
     * Response List Tournaments Tournaments Get
     * Successful Response
     */
    200: Array<Tournaments>;
};

export type ListTournamentsTournamentsGetResponse = ListTournamentsTournamentsGetResponses[keyof ListTournamentsTournamentsGetResponses];

export type GetTournamentTournamentsTournamentIdGetData = {
    body?: never;
    path: {
        /**
         * Tournament Id
         */
        tournament_id: number;
    };
    query?: never;
    url: '/tournaments/{tournament_id}';
};

export type GetTournamentTournamentsTournamentIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTournamentTournamentsTournamentIdGetError = GetTournamentTournamentsTournamentIdGetErrors[keyof GetTournamentTournamentsTournamentIdGetErrors];

export type GetTournamentTournamentsTournamentIdGetResponses = {
    /**
     * Successful Response
     */
    200: Tournaments;
};

export type GetTournamentTournamentsTournamentIdGetResponse = GetTournamentTournamentsTournamentIdGetResponses[keyof GetTournamentTournamentsTournamentIdGetResponses];

export type ListBadgesBadgesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * User Badges Only
         */
        user_badges_only?: boolean;
        /**
         * Page Index
         */
        page_index?: number;
        /**
         * Count
         */
        count?: number;
    };
    url: '/badges';
};

export type ListBadgesBadgesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListBadgesBadgesGetError = ListBadgesBadgesGetErrors[keyof ListBadgesBadgesGetErrors];

export type ListBadgesBadgesGetResponses = {
    /**
     * Response List Badges Badges Get
     * Successful Response
     */
    200: Array<Badges>;
};

export type ListBadgesBadgesGetResponse = ListBadgesBadgesGetResponses[keyof ListBadgesBadgesGetResponses];

export type GetBadgeBadgesBadgeIdGetData = {
    body?: never;
    path: {
        /**
         * Badge Id
         */
        badge_id: number;
    };
    query?: never;
    url: '/badges/{badge_id}';
};

export type GetBadgeBadgesBadgeIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetBadgeBadgesBadgeIdGetError = GetBadgeBadgesBadgeIdGetErrors[keyof GetBadgeBadgesBadgeIdGetErrors];

export type GetBadgeBadgesBadgeIdGetResponses = {
    /**
     * Successful Response
     */
    200: Badges;
};

export type GetBadgeBadgesBadgeIdGetResponse = GetBadgeBadgesBadgeIdGetResponses[keyof GetBadgeBadgesBadgeIdGetResponses];

export type ListChallengesChallengesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Tournament Id
         */
        tournament_id?: number | null;
        /**
         * Page Index
         */
        page_index?: number;
        /**
         * Count
         */
        count?: number;
    };
    url: '/challenges';
};

export type ListChallengesChallengesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListChallengesChallengesGetError = ListChallengesChallengesGetErrors[keyof ListChallengesChallengesGetErrors];

export type ListChallengesChallengesGetResponses = {
    /**
     * Response List Challenges Challenges Get
     * Successful Response
     */
    200: Array<Challenges>;
};

export type ListChallengesChallengesGetResponse = ListChallengesChallengesGetResponses[keyof ListChallengesChallengesGetResponses];

export type StartChallengeChallengesChallengeIdStartPostData = {
    body?: never;
    path: {
        /**
         * Challenge Id
         */
        challenge_id: number;
    };
    query?: never;
    url: '/challenges/{challenge_id}/start';
};

export type StartChallengeChallengesChallengeIdStartPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type StartChallengeChallengesChallengeIdStartPostError = StartChallengeChallengesChallengeIdStartPostErrors[keyof StartChallengeChallengesChallengeIdStartPostErrors];

export type StartChallengeChallengesChallengeIdStartPostResponses = {
    /**
     * Successful Response
     */
    200: UserChallengeContexts;
};

export type StartChallengeChallengesChallengeIdStartPostResponse = StartChallengeChallengesChallengeIdStartPostResponses[keyof StartChallengeChallengesChallengeIdStartPostResponses];

export type AddMessageToChallengeChallengesChallengeIdAddMessagePostData = {
    body?: never;
    path: {
        /**
         * Challenge Id
         */
        challenge_id: number;
    };
    query: {
        /**
         * Message
         */
        message: string;
        /**
         * Role
         */
        role?: 'user' | 'assistant' | 'system';
        /**
         * Solicit Llm Response
         */
        solicit_llm_response?: boolean;
    };
    url: '/challenges/{challenge_id}/add_message';
};

export type AddMessageToChallengeChallengesChallengeIdAddMessagePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddMessageToChallengeChallengesChallengeIdAddMessagePostError = AddMessageToChallengeChallengesChallengeIdAddMessagePostErrors[keyof AddMessageToChallengeChallengesChallengeIdAddMessagePostErrors];

export type AddMessageToChallengeChallengesChallengeIdAddMessagePostResponses = {
    /**
     * Successful Response
     */
    200: ChallengeContextResponse;
};

export type AddMessageToChallengeChallengesChallengeIdAddMessagePostResponse = AddMessageToChallengeChallengesChallengeIdAddMessagePostResponses[keyof AddMessageToChallengeChallengesChallengeIdAddMessagePostResponses];

export type EvaluateChallengeContextChallengesChallengeIdEvaluateGetData = {
    body?: never;
    path: {
        /**
         * Challenge Id
         */
        challenge_id: number;
    };
    query?: never;
    url: '/challenges/{challenge_id}/evaluate';
};

export type EvaluateChallengeContextChallengesChallengeIdEvaluateGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EvaluateChallengeContextChallengesChallengeIdEvaluateGetError = EvaluateChallengeContextChallengesChallengeIdEvaluateGetErrors[keyof EvaluateChallengeContextChallengesChallengeIdEvaluateGetErrors];

export type EvaluateChallengeContextChallengesChallengeIdEvaluateGetResponses = {
    /**
     * Successful Response
     */
    200: EvalResult;
};

export type EvaluateChallengeContextChallengesChallengeIdEvaluateGetResponse = EvaluateChallengeContextChallengesChallengeIdEvaluateGetResponses[keyof EvaluateChallengeContextChallengesChallengeIdEvaluateGetResponses];

export type JoinTournamentTournamentsTournamentIdJoinPostData = {
    body?: never;
    path: {
        /**
         * Tournament Id
         */
        tournament_id: number;
    };
    query?: never;
    url: '/tournaments/{tournament_id}/join';
};

export type JoinTournamentTournamentsTournamentIdJoinPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type JoinTournamentTournamentsTournamentIdJoinPostError = JoinTournamentTournamentsTournamentIdJoinPostErrors[keyof JoinTournamentTournamentsTournamentIdJoinPostErrors];

export type JoinTournamentTournamentsTournamentIdJoinPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetCurrentUserInfoUsersMeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type GetCurrentUserInfoUsersMeGetResponses = {
    /**
     * Successful Response
     */
    200: UserInfo;
};

export type GetCurrentUserInfoUsersMeGetResponse = GetCurrentUserInfoUsersMeGetResponses[keyof GetCurrentUserInfoUsersMeGetResponses];

export type GetChallengeContextChallengesChallengeIdContextGetData = {
    body?: never;
    path: {
        /**
         * Challenge Id
         */
        challenge_id: number;
    };
    query?: never;
    url: '/challenges/{challenge_id}/context';
};

export type GetChallengeContextChallengesChallengeIdContextGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetChallengeContextChallengesChallengeIdContextGetError = GetChallengeContextChallengesChallengeIdContextGetErrors[keyof GetChallengeContextChallengesChallengeIdContextGetErrors];

export type GetChallengeContextChallengesChallengeIdContextGetResponses = {
    /**
     * Successful Response
     */
    200: ChallengeContextResponse;
};

export type GetChallengeContextChallengesChallengeIdContextGetResponse = GetChallengeContextChallengesChallengeIdContextGetResponses[keyof GetChallengeContextChallengesChallengeIdContextGetResponses];

export type CreateChatCompletionLlmChatCompletionsPostData = {
    body: ChatRequest;
    path?: never;
    query?: never;
    url: '/llm/chat/completions';
};

export type CreateChatCompletionLlmChatCompletionsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateChatCompletionLlmChatCompletionsPostError = CreateChatCompletionLlmChatCompletionsPostErrors[keyof CreateChatCompletionLlmChatCompletionsPostErrors];

export type CreateChatCompletionLlmChatCompletionsPostResponses = {
    /**
     * Successful Response
     */
    200: ChatResponse;
};

export type CreateChatCompletionLlmChatCompletionsPostResponse = CreateChatCompletionLlmChatCompletionsPostResponses[keyof CreateChatCompletionLlmChatCompletionsPostResponses];

export type ListAvailableModelsLlmModelsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/llm/models';
};

export type ListAvailableModelsLlmModelsGetResponses = {
    /**
     * Successful Response
     */
    200: ModelsResponse;
};

export type ListAvailableModelsLlmModelsGetResponse = ListAvailableModelsLlmModelsGetResponses[keyof ListAvailableModelsLlmModelsGetResponses];

export type CheckLlmHealthLlmHealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/llm/health';
};

export type CheckLlmHealthLlmHealthGetResponses = {
    /**
     * Successful Response
     */
    200: LlmHealthStatus;
};

export type CheckLlmHealthLlmHealthGetResponse = CheckLlmHealthLlmHealthGetResponses[keyof CheckLlmHealthLlmHealthGetResponses];

export type RootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type RootGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HealthCheckHealthCheckGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health_check';
};

export type HealthCheckHealthCheckGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};