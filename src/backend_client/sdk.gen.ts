// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { ListTournamentsTournamentsGetData, ListTournamentsTournamentsGetResponses, ListTournamentsTournamentsGetErrors, GetTournamentTournamentsTournamentIdGetData, GetTournamentTournamentsTournamentIdGetResponses, GetTournamentTournamentsTournamentIdGetErrors, ListBadgesBadgesGetData, ListBadgesBadgesGetResponses, ListBadgesBadgesGetErrors, GetBadgeBadgesBadgeIdGetData, GetBadgeBadgesBadgeIdGetResponses, GetBadgeBadgesBadgeIdGetErrors, ListChallengesChallengesGetData, ListChallengesChallengesGetResponses, ListChallengesChallengesGetErrors, StartChallengeChallengesChallengeIdStartPostData, StartChallengeChallengesChallengeIdStartPostResponses, StartChallengeChallengesChallengeIdStartPostErrors, AddMessageToChallengeChallengesChallengeIdAddMessagePostData, AddMessageToChallengeChallengesChallengeIdAddMessagePostResponses, AddMessageToChallengeChallengesChallengeIdAddMessagePostErrors, EvaluateChallengeContextChallengesChallengeIdEvaluateGetData, EvaluateChallengeContextChallengesChallengeIdEvaluateGetResponses, EvaluateChallengeContextChallengesChallengeIdEvaluateGetErrors, JoinTournamentTournamentsTournamentIdJoinPostData, JoinTournamentTournamentsTournamentIdJoinPostResponses, JoinTournamentTournamentsTournamentIdJoinPostErrors, GetCurrentUserInfoUsersMeGetData, GetCurrentUserInfoUsersMeGetResponses, GetChallengeContextChallengesChallengeIdContextGetData, GetChallengeContextChallengesChallengeIdContextGetResponses, GetChallengeContextChallengesChallengeIdContextGetErrors, CreateChatCompletionLlmChatCompletionsPostData, CreateChatCompletionLlmChatCompletionsPostResponses, CreateChatCompletionLlmChatCompletionsPostErrors, ListAvailableModelsLlmModelsGetData, ListAvailableModelsLlmModelsGetResponses, CheckLlmHealthLlmHealthGetData, CheckLlmHealthLlmHealthGetResponses, RootGetData, RootGetResponses, HealthCheckHealthCheckGetData, HealthCheckHealthCheckGetResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List Tournaments
 * List tournaments with filtering
 */
export const listTournamentsTournamentsGet = <ThrowOnError extends boolean = false>(options?: Options<ListTournamentsTournamentsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTournamentsTournamentsGetResponses, ListTournamentsTournamentsGetErrors, ThrowOnError>({
        url: '/tournaments',
        ...options
    });
};

/**
 * Get Tournament
 * Get a specific tournament
 */
export const getTournamentTournamentsTournamentIdGet = <ThrowOnError extends boolean = false>(options: Options<GetTournamentTournamentsTournamentIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTournamentTournamentsTournamentIdGetResponses, GetTournamentTournamentsTournamentIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tournaments/{tournament_id}',
        ...options
    });
};

/**
 * List Badges
 * List badges, optionally filtered to user's badges only
 */
export const listBadgesBadgesGet = <ThrowOnError extends boolean = false>(options?: Options<ListBadgesBadgesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListBadgesBadgesGetResponses, ListBadgesBadgesGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/badges',
        ...options
    });
};

/**
 * Get Badge
 * Get a specific badge
 */
export const getBadgeBadgesBadgeIdGet = <ThrowOnError extends boolean = false>(options: Options<GetBadgeBadgesBadgeIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBadgeBadgesBadgeIdGetResponses, GetBadgeBadgesBadgeIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/badges/{badge_id}',
        ...options
    });
};

/**
 * List Challenges
 * List challenges with filtering
 */
export const listChallengesChallengesGet = <ThrowOnError extends boolean = false>(options?: Options<ListChallengesChallengesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListChallengesChallengesGetResponses, ListChallengesChallengesGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/challenges',
        ...options
    });
};

/**
 * Start Challenge
 * Start a challenge for the current user
 */
export const startChallengeChallengesChallengeIdStartPost = <ThrowOnError extends boolean = false>(options: Options<StartChallengeChallengesChallengeIdStartPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StartChallengeChallengesChallengeIdStartPostResponses, StartChallengeChallengesChallengeIdStartPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/challenges/{challenge_id}/start',
        ...options
    });
};

/**
 * Add Message To Challenge
 * Submit a message to the challenge agent
 */
export const addMessageToChallengeChallengesChallengeIdAddMessagePost = <ThrowOnError extends boolean = false>(options: Options<AddMessageToChallengeChallengesChallengeIdAddMessagePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddMessageToChallengeChallengesChallengeIdAddMessagePostResponses, AddMessageToChallengeChallengesChallengeIdAddMessagePostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/challenges/{challenge_id}/add_message',
        ...options
    });
};

/**
 * Evaluate Challenge Context
 * Evaluate the challenge context
 */
export const evaluateChallengeContextChallengesChallengeIdEvaluateGet = <ThrowOnError extends boolean = false>(options: Options<EvaluateChallengeContextChallengesChallengeIdEvaluateGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EvaluateChallengeContextChallengesChallengeIdEvaluateGetResponses, EvaluateChallengeContextChallengesChallengeIdEvaluateGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/challenges/{challenge_id}/evaluate',
        ...options
    });
};

/**
 * Join Tournament
 * Join a tournament
 */
export const joinTournamentTournamentsTournamentIdJoinPost = <ThrowOnError extends boolean = false>(options: Options<JoinTournamentTournamentsTournamentIdJoinPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<JoinTournamentTournamentsTournamentIdJoinPostResponses, JoinTournamentTournamentsTournamentIdJoinPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tournaments/{tournament_id}/join',
        ...options
    });
};

/**
 * Get Current User Info
 * Get current user information
 */
export const getCurrentUserInfoUsersMeGet = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentUserInfoUsersMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentUserInfoUsersMeGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options
    });
};

/**
 * Get Challenge Context
 * Get challenge context for current user
 */
export const getChallengeContextChallengesChallengeIdContextGet = <ThrowOnError extends boolean = false>(options: Options<GetChallengeContextChallengesChallengeIdContextGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChallengeContextChallengesChallengeIdContextGetResponses, GetChallengeContextChallengesChallengeIdContextGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/challenges/{challenge_id}/context',
        ...options
    });
};

/**
 * Create Chat Completion
 * Create a chat completion using direct LiteLLM integration.
 *
 * This endpoint uses LiteLLM library to make direct calls to LLM providers
 * without requiring a separate proxy server.
 */
export const createChatCompletionLlmChatCompletionsPost = <ThrowOnError extends boolean = false>(options: Options<CreateChatCompletionLlmChatCompletionsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateChatCompletionLlmChatCompletionsPostResponses, CreateChatCompletionLlmChatCompletionsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/llm/chat/completions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Available Models
 * List available LLM models.
 *
 * Returns a list of all models that have their API keys configured
 * and are ready to use.
 */
export const listAvailableModelsLlmModelsGet = <ThrowOnError extends boolean = false>(options?: Options<ListAvailableModelsLlmModelsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListAvailableModelsLlmModelsGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/llm/models',
        ...options
    });
};

/**
 * Check Llm Health
 * Check the health status of the LLM service.
 *
 * Returns health information including available models and missing API keys.
 */
export const checkLlmHealthLlmHealthGet = <ThrowOnError extends boolean = false>(options?: Options<CheckLlmHealthLlmHealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CheckLlmHealthLlmHealthGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/llm/health',
        ...options
    });
};

/**
 * Root
 * Root endpoint - API information
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RootGetResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Health Check
 * Health check endpoint
 */
export const healthCheckHealthCheckGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckHealthCheckGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthCheckHealthCheckGetResponses, unknown, ThrowOnError>({
        url: '/health_check',
        ...options
    });
};